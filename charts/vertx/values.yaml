# Default values for redis.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

common:
  updateStrategy: RollingUpdate
  maxUnavailable: 1
  maxSurge: 1
    
replicaCount: 1

image:
  repository: us-central1-docker.pkg.dev/topl-shared-project-dev/topl-artifacts-dev/vertx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest-prod

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  enabled: true
  name: vertx-svc-dev
  type: ClusterIP
  portName: vertx-dev
  port: 2376
  https:
    portName: https
    port: 443
  http:
    portName: http
    port: 80
  annotations:
    { 
      "cloud.google.com/neg": '{"ingress": true}',
      "app-protocols": '{"https":"HTTPS","http":"HTTP"}'
    }


backendConfig:
  enabled: true
  checkIntervalSec: 60
  type: HTTPS
  requestPath: "/healthz"

volume:
  mountPath: /app/data
  tls:
    mountPath: /app/config/tls

configMap:
  create: true
  name: vertx-config-dev
  data:
    PORT: 2376
    HEALTH_CHECK_PORT: 8100
    MAINNET_TARGET_URI: 'https://main.torus.topl.network'
    VALHALLA_TARGET_URI: 'https://valhalla.torus.topl.network'
    LOGGING_HOST: 'log.topl.tech'
    LOGGING_PORT: 12201
    LOGGING_PROTOCOL: 'tcp'
    NODE_ENV: 'dev'

secret:
  create: false
  name: vertx-secrets-dev

# TLS certificate configuration via cert-manager
server:
  certificate:
    # -- Deploy a Certificate resource (requires cert-manager)
    enabled: true
    name: vertx-cert-dev
    # -- The name of the Secret that will be automatically created and managed by this Certificate resource
    secretName: vertx-tls-dev
    # -- Certificate primary domain (commonName)
    domain: "dev.vertx.topl.services"
    # -- Certificate Subject Alternate Names (SANs)
    additionalHosts: []
    # -- The requested 'duration' (i.e. lifetime) of the certificate.
    # @default -- `""` (defaults to 2160h = 90d if not specified)
    ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
    duration: ""
    # -- How long before the expiry a certificate should be renewed.
    # @default -- `""` (defaults to 360h = 15d if not specified)
    ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
    renewBefore: ""
    # Certificate issuer
    ## Ref: https://cert-manager.io/docs/concepts/issuer
    issuer:
      # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
      group: "cert-manager.io"
      # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
      kind: "ClusterIssuer"
      # -- Certificate issuer name. Eg. `letsencrypt`
      name: "letsencrypt-prod"
    # Private key of the certificate
    privateKey:
      # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
      rotationPolicy: Never
      # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
      encoding: PKCS1
      # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
      algorithm: RSA
      # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
      size: 2048

healthCheck:
  portName: health-check
  livenessProbe:
    enabled: true
    path: /healthz
    initialDelaySeconds: 150 ## Application takes a while to start up
    timeoutSeconds: 30
    periodSeconds: 60 # Perform check every x seconds.
  readinessProbe:
    enabled: true
    path: /healthz
    initialDelaySeconds: 150 ## Application takes a while to be ready
    timeoutSeconds: 30
    periodSeconds: 60 # Perform check every x seconds.

ingress:
  enabled: true
  name: vertx-ingress
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: dev.vertx.topl.services
      paths:
        - path: /*
          pathType: ImplementationSpecific
          serviceName: "vertx-svc-dev"
          servicePort: 2376
  tls:
    - secretName: vertx-tls-dev
      hosts:
        - dev.vertx.topl.services

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

### Redis configurations
redis:
  name: vertx-redis-dev
  replicaCount: 1
  image:
    repository: redis
    imagePullPolicy: IfNotPresent
    tag: latest
  port: 6379

  service:
    name: vertx-redis-svc-dev

  volume:
    storageClass: standard
    storageSize: 1Gi
    mountPath: /opt/redis/data
    accessModes: [ "ReadWriteOnce" ]

  ## Redis config file
  ## ref: https://redis.io/topics/config
  ##
  configMap:
    create: true
    name: redis-config-dev
    redisUrl: redis://vertx-redis-svc-dev:6379
    conf: |-
      # Enable AOF https://redis.io/topics/persistence#append-only-file
      appendonly yes
      maxclients 10000
      # Disable RDB persistence, AOF persistence already enabled.
      save ""