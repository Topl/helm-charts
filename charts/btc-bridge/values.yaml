# Default values for btc-bridge.
# This is a YAML-formatted file.

# The overall system your service is a part of
system: btc-bridge
# The name of your service
service: btc-bridge
# The major version number for your service
version: 1

ui:
  enabled: true
  # The overall system your service is a part of
  system: bridge-ui
  # The name of your service
  service: bridge-ui
  # The major version number for your service
  version: 1

  # Docker settings
  image:
    # The name of your docker container
    repository: ghcr.io/topl/bridge-ui
    # Your docker container's tag
    tag: 0.0.0-9046a70
    imagePullPolicy: IfNotPresent

  # Istio uses the service account name as a component of the service's security
  # identity. Set "create" to false to use an previously created service account.
  serviceAccount:
    name: bridge-ui
    create: true
    automountToken: false

  # The initial number of pod replicas to run for your service
  replicaCount: 1
  # The maximum number of pods from that set that can be unavailable at once
  maxUnavailable: 1

  # Horizontal pod autoscaler configuration (optional)
  autoscaling:
    minReplicas: 1
    maxReplicas: 5
    targetAverageCpuUtilization: 80

  serviceType: NodePort

  # Port settings
  # Ports must be named <protocol>[-<suffix>] to work with Istio.
  # Valid protocols are grpc, http, http2, https, mongo, mysql, redis, tcp, tls, udp
  ports:
    - name: https-svc
      port: 9999
      targetPort: 9999

  # Configure the Istio ingress gateway to route outside traffic for the provided
  # host name to this service on the ports and protocols defined in the 'ports' section
  # above.
  istio:
    enabled: false

    virtualServiceRoutes:
      http:
        - port: 443
          targetPort: 9999
          matchPrefix: []

    annotations:
      {}
      # networking.istio.io/exportTo: .

    ingress:
      gateways:
      - istio-gateways/gateway
      host: annulus.example.com
      # Adds 301 redirects for the provided hosts to the main host.
      redirectHosts: []

    # # The overall timeout for requests to this service
    # # Optional
    overallTimeout: # 24h

    # # Client retry settings (use Istio syntax)
    # # Optional
    retries: {}
    #   attempts: 3
    #   perTryTimeout: 5s

    # # Circuit breaker settings (use Istio syntax)
    # # Optional
    outlierDetection: {}
    #   consecutive5xxErrors: 5

  # Resource settings (use Kubernetes syntax)
  # Optional
  resources:
    requests:
      memory: "32Mi"
      cpu: "200m"
    limits:
      memory: "500Mi"
      cpu: "250m"
      ephemeral-storage: "500Mi"

  podSecurityContext:
    runAsUser: 101
    runAsGroup: 101
    fsGroup: 101
    supplementalGroups: [101]
    seccompProfile:
      type: RuntimeDefault

  securityContext:
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  networkPolicy:
    enabled: true

  # Probe settings (use Kubernetes syntax)
  probes:
    livenessProbe:
      initialDelaySeconds: 30
      httpGet:
        path: /healthz
        port: 9999
    readinessProbe:
      timeoutSeconds: 10
      httpGet:
        path: /healthz
        port: 9999

  configMap: # Optional
    # Where the config map should be mounted inside your container's filesystem.
    mountPath: /etc/nginx
    fileName: nginx.conf
    # Everything under content is copied verbatim into your service's configmap.
    content: |
      worker_processes  auto;
      error_log  /tmp/nginx/error.log warn;
      pid        /tmp/nginx/nginx.pid;
      events {
          worker_connections  1024;
      }
      http {
          default_type  application/octet-stream;
          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';
          access_log  /var/log/nginx/access.log  main;
          sendfile        on;
          #tcp_nopush     on;
          keepalive_timeout  65;
          #gzip  on;
          include /etc/nginx/conf.d/*.conf;
          server {
            listen 9999;
            root /usr/share/nginx/html;
            location /healthz {
              access_log          off;
              return              200;
            }
          }
      }

backend:
  service: btc-bridge
  # Docker settings
  image:
    # The name of your docker container
    repository: ghcr.io/topl/topl-btc-bridge
    # Your docker container's tag
    tag: ""
    imagePullPolicy: Always

  command: # Optional
  args:
    - "--topl-host"
    - "localhost"
    - "--topl-port"
    - "9084"
    - "--topl-secure"
    - "false"
    - "--topl-network"
    - "private"
    - "--btc-network"
    - "regtest"
    - "--topl-wallet-db"
    - "/mnt/btc-bridge/topl-wallet.db"
    - "--topl-wallet-seed-file"
    - "/mnt/btc-bridge/topl-keyfile.json"
    # - "--peg-in-seed-file"
    # - "/mnt/btc-bridge/pegin-wallet.json"

  # command:
  #   - "sleep"
  # args:
  #   - "infinity"

  env:
    - name: _JAVA_OPTIONS
      value: "-XX:MaxRAMPercentage=70.0 -XX:ActiveProcessorCount=4"
    - name: TOPL_WALLET_PASSWORD
      value: "password"
    

  # Istio uses the service account name as a component of the service's security
  # identity. Set "create" to false to use an previously created service account.
  serviceAccount:
    name: btc-bridge
    create: true
    automountToken: false

  # The initial number of pod replicas to run for your service
  replicaCount: 1
  # The maximum number of pods from that set that can be unavailable at once
  maxUnavailable: 1

  istio:
    enabled: false

    ingress:
      gateways: 
      - istio-gateways/gateway
      host: bridge.example.com
      redirectHosts: []
      matchPrefix:
        - "/"

    virtualServiceRoutes:
      http:
        - port: 443
          targetPort: 4000
          matchPrefix: []
    
    # # The overall timeout for requests to this service
    # # Optional
    overallTimeout: # 24h

    # # Client retry settings (use Istio syntax)
    # # Optional
    retries: {}
    #   attempts: 3
    #   perTryTimeout: 5s

    # # Circuit breaker settings (use Istio syntax)
    # # Optional
    outlierDetection: {}
    #   consecutive5xxErrors: 5

  serviceType: NodePort

  # Port settings
  # Ports must be named <protocol>[-<suffix>] to work with Istio.
  # Valid protocols are grpc, http, http2, https, mongo, mysql, redis, tcp, tls, udp
  ports:
    - name: https-svc
      port: 4000
      targetPort: 4000

  # Resource settings (use Kubernetes syntax)
  # Optional
  resources:
    requests:
      memory: "3Gi"
      cpu: "50m"
    limits:
      memory: "3Gi"
      ephemeral-storage: "500Mi"

  podSecurityContext:
    runAsUser: 1001
    runAsGroup: 0
    fsGroup: 0
    supplementalGroups: [0]
    seccompProfile:
      type: RuntimeDefault

  securityContext:
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  nodeSelector: {}

  networkPolicy:
    enabled: false

  # Probe settings (use Kubernetes syntax)
  probes:
    livenessProbe:
      initialDelaySeconds: 30
      httpGet:
        path: /
        port: 4000
    readinessProbe:
      timeoutSeconds: 10
      httpGet:
        path: /
        port: 4000

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  initWallet:
    enabled: false
    image: dacr/coursier-launcher:openjdk-11

  persistence:
    enabled: true
    matchLabels: false
    mountPath: /mnt/btc-bridge/
    accessModes:
      - ReadWriteOnce
    # GKE specific storage classes: standard, standard-rwo, premium-rwo
    storageClassName:
    storageSize: 10Gi
    finalizers:
      - kubernetes.io/pvc-protection
