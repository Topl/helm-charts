# Default values for bifrost.
# This is a YAML-formatted file.

# The overall system your service is a part of
system: bitcoin-node
# The name of your service
service: bitcoin-node
# The major version number for your service
version: 1

# Docker settings
image:
  # The name of your docker container
  repository: ruimarinho/bitcoin-core
  tag: ""
  imagePullPolicy: Always

command:
  - "bitcoind"
# - sleep
# - infinity
args:
  - "-printtoconsole"
  - "-chain=regtest"
  - "-zmqpubrawblock=tcp://0.0.0.0:28332"
  - "-port=18444"
  - "-rpcport=18443"
  - "-rpcbind=:18443"
  - "-rpcallowip=0.0.0.0/0"
  - "-datadir=/mnt/bitcoin"
  - "-wallet=minting"

cronJob:
  enabled: true

rpc:
  username: "bitcoin"
  password: ""
  existingSecret: "" # Set to manually manage secret.

wallet:
  name: "minting"
  passphrase: ""
  existingSecret: "" # Set to manually manage secret.

env: # Optional
- name: BITCOIN_DATA
  value: /mnt/bitcoin

nodeSelector: {}
tolerations: []
affinity: {}
  # node_pool: guaranteed-pool
# Istio uses the service account name as a component of the service's security
# identity. Set "create" to false to use an previously created service account.
serviceAccount:
  name: bitcoin-node
  create: true
  automountToken: false

# The initial number of pod replicas to run for your service
replicaCount: 1
# The maximum number of pods from that set that can be unavailable at once
maxUnavailable: 1

serviceType: ClusterIP

# Port settings
# Ports must be named <protocol>[-<suffix>] to work with Istio.
# Valid protocols are grpc, http, http2, https, mongo, mysql, redis, tcp, tls, udp
ports:
  - name: tcp-p2p
    port: 18444
    targetPort: 18444
  - name: tcp-rpc
    port: 18443
    targetPort: 18443
  - name: tcp-zmqpub
    port: 28332
    targetPort: 28332

# Configure the Istio ingress gateway to route outside traffic for the provided
# host name to this service on the ports and protocols defined in the 'ports' section
# above.
istio:
  enabled: false

  virtualServiceRoutes:
    tcp:
      - port: 18444
        targetPort: 18444
        matchPrefix: []

  annotations:
    {}
    # networking.istio.io/exportTo: .

  ingress:
    gateways: 
    - istio-gateways/gateway
    host: bitcoin.example.com
    redirectHosts: []

  # # The overall timeout for requests to this service
  # # Optional
  overallTimeout: # 24h

  # # Client retry settings (use Istio syntax)
  # # Optional
  retries: {}
  #   attempts: 3
  #   perTryTimeout: 5s

  # # Circuit breaker settings (use Istio syntax)
  # # Optional
  outlierDetection: {}
  #   consecutive5xxErrors: 5

# Resource settings (use Kubernetes syntax)
# Optional
resources:
  requests:
    memory: "3Gi"
    cpu: "25m"
  limits:
    memory: "3Gi"
    ephemeral-storage: "500Mi"

podSecurityContext:
  runAsUser: 101
  runAsGroup: 101
  fsGroup: 101
  seccompProfile:
    type: RuntimeDefault

securityContext:
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    add:
      - CAP_FOWNER

networkPolicy:
  enabled: false

# Probe settings (use Kubernetes syntax)
# Optional
probes:
  startupProbe: # Wait failureThreshold * periodSeconds (300s) before allowing other probes to start.
    tcpSocket:
      port: 18444
    failureThreshold: 30
    timeoutSeconds: 20
  readinessProbe:
    timeoutSeconds: 20
    tcpSocket:
      port: 18444

configMap: # Optional
  # Where the config map should be mounted inside your container's filesystem.
  mountPath: /config/bitcoin-config
  fileName: custom-config.yaml
  # Everything under content is copied verbatim into your service's configmap.
  # Example:
  content: |
    test
volume:
  mountDirectory: /mnt/bitcoin/
  # GKE specific storage classes: standard, standard-rwo, premium-rwo
  storageClass:
  storageSize: 10Gi
