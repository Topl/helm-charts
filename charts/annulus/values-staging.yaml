# Default values for annulus.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
common:
  updateStrategy: RollingUpdate
  maxUnavailable: 1 
  maxSurge: 1
  replicaCount: 1

image:
  api:
    repository: us-central1-docker.pkg.dev/topl-shared-project-dev/topl-artifacts-dev/annulus-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: dev
  
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

secret:
  api:
    name: annulus-api-prod-secrets

configMap:
  api:
    create: true
    name: annulus-api-prod-config
    data:
      NODE_ENV: production
      PRIVATE_ENABLED: false
      VALHALLA_ENABLED: true
      VALHALLA_DB_NAME: valhallaData
      TOPLNET_ENABLED: true
      TOPLNET_DB_NAME: toplnetData
      LOGGING_HOST: log.topl.tech
      LOGGING_PORT: 12201
      LOGGING_PROTOCOL: 'tcp'
      MAILER_ADMIN_EMAILS: 'j.aman@topl.me,r.aragonez@topl.me,c.georgen@topl.me'
      MAILER_DEV_EMAILS: 'j.aman@topl.me,r.aragonez@topl.me,e.berrios@topl.me'
  client:
    create: false
    name: annulus-api-prod-config
    data:
      NODE_ENV: staging
      PRIVATE_ENABLED: false
      VALHALLA_ENABLED: true
      VALHALLA_DB_NAME: valhallaData
      TOPLNET_ENABLED: true
      TOPLNET_DB_NAME: toplnetData
      LOGGING_HOST: log.topl.tech
      LOGGING_PORT: 12201
      LOGGING_PROTOCOL: 'tcp'
      MAILER_ADMIN_EMAILS: 'j.aman@topl.me,r.aragonez@topl.me,c.georgen@topl.me'
      MAILER_DEV_EMAILS: 'j.aman@topl.me,r.aragonez@topl.me,e.berrios@topl.me'
  
podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  api:
    name: annulus-api-prod
    type: ClusterIP
    port: 5111
    portName: annulus-prod
    http:
      portName: http
      port: 80
    https:
      portName: https
      port: 443
    annotations:
      { 
        "cloud.google.com/neg": '{"ingress": true}',
        "app-protocols": '{"https":"HTTPS","http":"HTTP"}',
      }

# TLS certificate configuration via cert-manager
server:
  api:
    certificate:
      # -- Deploy a Certificate resource (requires cert-manager)
      enabled: false
      name: annulus-api-cert
      # -- The name of the Secret that will be automatically created and managed by this Certificate resource
      secretName: annulus-tls
      # -- Certificate primary domain (commonName)
      domain: "annulus.topl.services"
      # -- Certificate Subject Alternate Names (SANs)
      additionalHosts:
        - "dev.annulus.topl.services"
        - "dev-api.annulus.topl.services"
      # -- The requested 'duration' (i.e. lifetime) of the certificate.
      # @default -- `""` (defaults to 2160h = 90d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      duration: ""
      # -- How long before the expiry a certificate should be renewed.
      # @default -- `""` (defaults to 360h = 15d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      renewBefore: ""
      # Certificate issuer
      ## Ref: https://cert-manager.io/docs/concepts/issuer
      issuer:
        # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
        group: "cert-manager.io"
        # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
        kind: "ClusterIssuer"
        # -- Certificate issuer name. Eg. `letsencrypt`
        name: "letsencrypt-staging"
      # Private key of the certificate
      privateKey:
        # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
        rotationPolicy: Never
        # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
        encoding: PKCS1
        # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
        algorithm: RSA
        # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
        size: 2048
  client:
    certificate:
      # -- Deploy a Certificate resource (requires cert-manager)
      enabled: false
      name: annulus-api-cert
      # -- The name of the Secret that will be automatically created and managed by this Certificate resource
      secretName: annulus-tls
      # -- Certificate primary domain (commonName)
      domain: "annulus.topl.services"
      # -- Certificate Subject Alternate Names (SANs)
      additionalHosts:
        - "dev.annulus.topl.services"
        - "dev-api.annulus.topl.services"
      # -- The requested 'duration' (i.e. lifetime) of the certificate.
      # @default -- `""` (defaults to 2160h = 90d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      duration: ""
      # -- How long before the expiry a certificate should be renewed.
      # @default -- `""` (defaults to 360h = 15d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      renewBefore: ""
      # Certificate issuer
      ## Ref: https://cert-manager.io/docs/concepts/issuer
      issuer:
        # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
        group: "cert-manager.io"
        # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
        kind: "ClusterIssuer"
        # -- Certificate issuer name. Eg. `letsencrypt`
        name: "letsencrypt-staging"
      # Private key of the certificate
      privateKey:
        # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
        rotationPolicy: Never
        # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
        encoding: PKCS1
        # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
        algorithm: RSA
        # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
        size: 2048

ingress:
  api:
    enabled: true
    className: ""
    annotations: 
      {
        kubernetes.io/ingress.class: "gce"
      }

      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    defaultBackend: 
      serviceName: annulus-api-prod
      port: 5111
    paths:
      - path: /staging
        pathType: Prefix
        serviceName: annulus-api-staging
        servicePort: 5112
      - path: /
        pathType: Prefix
        serviceName: annulus-api-prod
        servicePort: 5111
    tls:
      - secretName: annulus-tls
        hosts:
          - dev-api.annulus.topl.services
          - dev.annulus.topl.services
  client:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    defaultBackend: 
      serviceName: annulus-staging
      port: 5111
    hosts:
      - host: dev-api.annulus.topl.services
        paths:
          - path: /*
            pathType: ImplementationSpecific
            serviceName: annulus-staging
            servicePort: 5112
      - host: dev.annulus.topl.services
        paths:
          - path: /staging
            pathType: ImplementationSpecific
            serviceName: annulus-staging
            servicePort: 5112
    tls:
      secretName: annulus-tls

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

healthCheck:
  livenessProbe:
    enabled: true
    path: /
    initialDelaySeconds: 300 
    timeoutSeconds: 30
    periodSeconds: 60 # Perform check every x seconds.
  readinessProbe:
    enabled: true
    path: /
    initialDelaySeconds: 300
    timeoutSeconds: 30
    periodSeconds: 60 # Perform check every x seconds.

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
